# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
    # The URL that specifies the behaviour of this scalar.
    url: String!
) on SCALAR
type CategoriesResponse {
    title: String!
    numberOfJobs: String!
}

type Company {
    id: Float!
    createdAt: String!
    updatedAt: String!
    name: String!
    location: String!
    industry: String!
    jobs: Job
    reviews: CompanyReview
}

input CompanyInput {
    name: String!
    industry: String!
    location: String!
}

type CompanyResponse {
    items: [Company!]!
    total: Int!
    hasMore: Boolean!
}

type CompanyReview {
    id: Float!
    createdAt: String!
    updatedAt: String!
    title: String!
    text: String!
    company: Company!
    stars: Float!
    companyId: Int!
}

input CreateJobInput {
    title: String!
    description: String
    employmentType: String
    salary: [Int!]
    applicationDeadline: String
    experience: Int
    companyId: Int!
}

input CreateWorkExpInput {
    jobTitle: String!
    company: String!
    from: String
    to: String
}

input CreateWorkSkillInput {
    skill: String!
    yearOfExperience: Float
}

type CurrentUserJobs {
    savedJobs: [Job!]
    appliedJobs: [Job!]
}

type ErrorField {
    field: String!
    message: String!
}

type Job {
    id: Float!
    createdAt: String!
    updatedAt: String!
    title: String!
    company: Company!
    companyId: Int!
    description: String!
    requirements: String
    employmentType: String!
    salary: String!
    applicationDeadline: String
    experience: Int
    viewCount: Int
    hasBeenSaved: Boolean!
    hasBeenReported: Boolean!
}

type JobResponse {
    items: [Job!]!
    total: Int!
    hasMore: Boolean!
}

type Mutation {
    changePassword(token: String!, newPassword: String!): UserResponse!
    register(options: RegisterInput!): UserResponse!
    login(usernameOrEmail: String!, password: String!): UserResponse!
    logout: Boolean!
    forgotPassword(email: String!): Boolean!
    saveJob(jobId: Int!): Int
    notInterestedJob(jobId: Float!): Boolean!
    createJob(createJobInput: CreateJobInput!): Job!
    updateJob(updateJobInput: UpdateJobInput!): Job!
    reportJob(jobId: Int!): ReportJobResponse
    deleteJob(id: Int!): Int!
    createWorkExperience(workExperience: CreateWorkExpInput!): WorkExperience!
    updateWorkExperience(workExperience: UpdateWorkExpInput!): WorkExperience!
    deleteWorkExperience(id: Float!): Int!
    createCompany(company: CompanyInput!): Company!
    createWorkSkill(workSkill: CreateWorkSkillInput!): WorkSkill!
    updateWorkSkill(workSkill: CreateWorkSkillInput!): WorkSkill!
    deleteWorkSkill(id: Float!): Int!
}

type ProfileResponse {
    workExperiences: [WorkExperience!]
    workSkills: [WorkSkill!]
}

type Query {
    hello: String!
    currentUser: User
    profile: ProfileResponse
    myJobs: CurrentUserJobs!
    jobs: JobResponse
    hottestJob: [Job!]!
    newestJob: [Job!]!
    relatedJobs(
        jobCategory: String!
        companyId: Int!
        currentJobId: Int!
    ): [Job!]!
    hottestCategories: [CategoriesResponse!]!
    job(id: Int!): Job
    companies: CompanyResponse!
}

input RegisterInput {
    username: String!
    password: String!
    email: String!
}

type ReportJobResponse {
    jobToReplace: Job!
    reportedJobId: Int!
}

input UpdateJobInput {
    title: String!
    description: String
    employmentType: String
    salary: [Int!]
    applicationDeadline: String
    experience: Int
    id: Int!
}

input UpdateWorkExpInput {
    jobTitle: String!
    company: String!
    from: String
    to: String
    id: Float!
}

type User {
    id: Float!
    createdAt: String!
    updatedAt: String!
    username: String!
    email: String!
    savedJobIds: [Int!]
    notInterestedJobIds: [Int!]
    reportedJobIds: [Int!]
    workExperiences: [WorkExperience!]!
    workSkills: [WorkSkill!]!
}

type UserResponse {
    errors: [ErrorField!]
    user: User
}

type WorkExperience {
    id: Float!
    createdAt: String!
    updatedAt: String!
    jobTitle: String!
    company: String!
    from: String
    to: String
    user: User!
    userId: Int!
}

type WorkSkill {
    id: Float!
    createdAt: String!
    updatedAt: String!
    skill: String!
    yearOfExperience: Float
    user: User!
    userId: Int!
}

